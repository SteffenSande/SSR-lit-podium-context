var j=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var c=(o,t,e,r)=>{for(var s=r>1?void 0:r?M(t,e):t,n=o.length-1,i;n>=0;n--)(i=o[n])&&(s=(r?i(t,e,s):i(s))||s);return r&&s&&j(t,e,s),s};import{html as $}from"lit";import{LitElement as F}from"lit";var w="langChanged";function I(o,t,e){return Object.entries(b(t||{})).reduce((r,[s,n])=>r.replace(new RegExp(`{{[ \xA0]*${s}[ \xA0]*}}`,"gm"),String(b(n))),o)}function N(o,t){let e=o.split("."),r=t.strings;for(;r!=null&&e.length>0;)r=r[e.shift()];return r!=null?r.toString():null}function b(o){return typeof o=="function"?o():o}var T=()=>({loader:()=>Promise.resolve({}),empty:o=>`[${o}]`,lookup:N,interpolate:I,translationCache:{}}),L=T();function A(o){return L=Object.assign(Object.assign({},L),o)}function S(o,t){let e=r=>o(r.detail);return window.addEventListener(w,e,t),()=>window.removeEventListener(w,e)}function l(o,t,e=L){let r=e.translationCache[o]||(e.translationCache[o]=e.lookup(o,e)||e.empty(o,e));return t=t!=null?b(t):null,t!=null?e.interpolate(r,t,e):r}import{directive as G}from"lit/directive.js";import{AsyncDirective as D}from"lit/async-directive.js";var p=class extends D{constructor(){super(...arguments),this.langChangedSubscription=null,this.getValue=()=>""}renderValue(t){return this.getValue=t,this.subscribe(),this.getValue()}langChanged(t){this.setValue(this.getValue(t))}subscribe(){this.langChangedSubscription==null&&(this.langChangedSubscription=S(this.langChanged.bind(this)))}unsubscribe(){this.langChangedSubscription!=null&&this.langChangedSubscription()}disconnected(){this.unsubscribe()}reconnected(){this.subscribe()}};var h=class extends p{render(t,e,r){return this.renderValue(()=>l(t,e,r))}},ut=G(h);import{directive as _}from"lit/directive.js";import{unsafeHTML as H}from"lit/directives/unsafe-html.js";var R=class extends h{render(t,e,r){return this.renderValue(()=>H(l(t,e,r)))}},bt=_(R);import{directive as z}from"lit/directive.js";var P=class extends p{render(t){return this.renderValue(t)}},Et=z(P);var g=class extends F{#t=!1;get t(){return this.#t||(A({translationCache:this.translations,lang:this.locale||""}),this.#t=!0),l}get translations(){return this.getAttribute("translations")?JSON.parse(this.getAttribute("translations")||"{}"):null}get locale(){return this.getAttribute("locale")}get initialState(){return JSON.parse(this.getAttribute("initial-state")||"{}")}};import{html as W,LitElement as Q}from"lit";import{customElement as X,state as Y}from"lit/decorators.js";var u=class extends Event{constructor(t,e,r){super("context-request",{bubbles:!0,composed:!0}),this.context=t,this.callback=e,this.subscribe=r}};var d=class{constructor(t,e,r,s=!1){this.host=t,this.context=e,this.callback=r,this.subscribe=s,this.provided=!1,this.value=void 0,this.host.addController(this)}hostConnected(){this.dispatchRequest()}hostDisconnected(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=void 0)}dispatchRequest(){this.host.dispatchEvent(new u(this.context,(t,e)=>{this.unsubscribe&&(this.unsubscribe!==e&&(this.provided=!1,this.unsubscribe()),this.subscribe||this.unsubscribe()),this.value=t,this.host.requestUpdate(),this.provided&&!this.subscribe||(this.provided=!0,this.callback&&this.callback(t,e)),this.unsubscribe=e},this.subscribe))}};var C=class{constructor(t){this.callbacks=new Map,this.updateObservers=()=>{for(let[e,r]of this.callbacks)e(this.t,r)},t!==void 0&&(this.value=t)}get value(){return this.t}set value(t){this.setValue(t)}setValue(t,e=!1){let r=e||!Object.is(t,this.t);this.t=t,r&&this.updateObservers()}addCallback(t,e){e&&(this.callbacks.has(t)||this.callbacks.set(t,()=>{this.callbacks.delete(t)})),t(this.value)}clearCallbacks(){this.callbacks.clear()}};var V=class extends Event{constructor(t){super("context-provider",{bubbles:!0,composed:!0}),this.context=t}},x=class extends C{constructor(t,e,r){super(r),this.host=t,this.context=e,this.onContextRequest=s=>{s.context===this.context&&s.composedPath()[0]!==this.host&&(s.stopPropagation(),this.addCallback(s.callback,s.subscribe))},this.attachListeners(),this.host.addController(this)}attachListeners(){this.host.addEventListener("context-request",this.onContextRequest)}hostConnected(){this.host.dispatchEvent(new V(this.context))}};var v=({finisher:o,descriptor:t})=>(e,r)=>{var s;if(r===void 0){let n=(s=e.originalKey)!==null&&s!==void 0?s:e.key,i=t!=null?{kind:"method",placement:"prototype",key:n,descriptor:t(e.key)}:{...e,key:n};return o!=null&&(i.finisher=function(a){o(a,n)}),i}{let n=e.constructor;t!==void 0&&Object.defineProperty(e,r,t(r)),o?.(n,r)}};function E({context:o}){return v({finisher:(t,e)=>{let r=new WeakMap;t.addInitializer(a=>{r.set(a,new x(a,o))});let s=Object.getOwnPropertyDescriptor(t.prototype,e),n=s?.set,i={...s,set:function(a){var q;(q=r.get(this))===null||q===void 0||q.setValue(a),n&&n.call(this,a)}};Object.defineProperty(t.prototype,e,i)}})}function k({context:o,subscribe:t}){return v({finisher:(e,r)=>{e.addInitializer(s=>{new d(s,o,n=>{s[r]=n},t)})}})}var y="Specific Context";import{html as B,LitElement as K}from"lit";import{customElement as U}from"lit/decorators.js";var m=class extends K{render(){return console.log("context",this.context),B`
      <section>
        This is inside the child, write something
        <input @input=${e=>{this.context.setContext({foo:e.target.value})}} .value=${this.context.foo} />
      </section>
    `}};c([k({context:y,subscribe:!0})],m.prototype,"context",2),m=c([U("some-child")],m);var f=class extends Q{constructor(){super(...arguments);this.context={foo:"bar",setContext:e=>{this.context={...this.context,...e}},reset:()=>{this.context={...this.context,foo:"bar"}}}}render(){return W`
      <section>
        In parent show: ${this.context.foo}
      </section>
      <some-child></some-child>
    `}};c([E({context:y}),Y()],f.prototype,"context",2),f=c([X("some-parent")],f);var O=class extends g{render(){return $`
      <section>
        <section>
          <h1>List of countries</h1>
          <ul>
            ${this.initialState.map(({name:e})=>$`<li>${e}</li>`)}
          </ul>
        </section>
        <some-parent></some-parent>
      </section>
    `}};export{O as default};
//# sourceMappingURL=data:application/json;base64,
